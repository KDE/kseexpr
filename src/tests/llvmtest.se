# SPDX-FileCopyrightText: 2011-2019 Disney Enterprises, Inc.
# SPDX-License-Identifier: LicenseRef-Apache-2.0
# SPDX-FileCopyrightText: 2020 L. E. Segovia <amy@amyspark.me>
# SPDX-License-Identifier: GPL-3.0-or-later

; RUN: llvmtest < %s | FileCheck %s

;/********************** basic testing of the expr ***************************/
; CHECK: 12
"8+4" 1

; CHECK: 4
"8-4" 1

; CHECK: 32
"8*4" 1

; CHECK: 2
"8/4" 1

; CHECK: 0
"8%4" 1

; CHECK: 9
"3^2" 1

; CHECK: 7
"(3+4)" 1

; CHECK: 11 28 5
"[7+4,7*4,9-4]" 3

; CHECK: 0
"3>4" 1

; CHECK: 1
"3<4" 1

; CHECK: -3
"-3" 1

; CHECK: -11 -28 -5
"-[7+4,7*4,9-4]" 3

; CHECK: -2 -2 -2
"![3,3,3]" 3

; CHECK: -2 -2 -2
"~[3,3,3]" 3

; CHECK: 1
"3 || 4" 1

; CHECK: 0
"0 || 0" 1

; CHECK:  1 1 1
"[3,0,3] || [0,4,0]" 3

; CHECK: 0 0 0
"[0,0,0] || [0,0,0]" 3

; CHECK: 1 1 1
"8 || [0,0,0]" 3

; CHECK: 0 0 0
"0 || [0,0,0]" 3

; CHECK: 1 1 1
"[0,0,0] || 8" 3

; CHECK: 0 0 0
"[0,0,0] || 0" 3

; CHECK: 4
"[3,4,5][1]" 1

; CHECK: 5
"[3,4,5][2]" 1

; CHECK: 4
"x=1;x=3;x+1" 1

; CHECK: 10
"x=1;x+=3;x+6" 1

"x=[3,4,5]; x+[7,8,9]" 3

; CHECK: 8
"8+(9==10)" 1

; CHECK: 9
"8+(9==9)" 1

; CHECK: 4
"y=4; if(8==8){y=9;} y+3" 1

; CHECK: 4
"if(8==8){y=1;}else{y=2;}y+3" 1

; CHECK: 7
"def FLOAT testfun(FLOAT a, FLOAT b) {a+b} testfun(3,4)" 1

; CHECK: 5 7 9
"def FLOAT[3] testfun(FLOAT[3] a, FLOAT[3] b) {a+b} testfun([1,2,3],[4,5,6])" 3


; CHECK: 5 5 5
"def FLOAT[3] testfun(FLOAT[3] a, FLOAT[3] b) {a+b} testfun(2,3)" 3

; CHECK: 5 6 7
"def FLOAT[3] testfun(FLOAT[3] a, FLOAT[3] b) {a+b} testfun([2,3,4],3)" 3

; CHECK: 5 6 7
"def FLOAT[3] testfun(FLOAT a, FLOAT[3] b) {a+b} testfun(1,[4,5,6])" 3

; TODO reopen later
;/**************************************************************************/
; CHECK: 5 7 9
;"def FLOAT[3] testfun(FLOAT a, FLOAT[3] b) {a+b} testfun([1,2,3],[4,5,6])" 3

; CHECK: 5 7 9
; "def testfun(FLOAT[3] a, FLOAT[3] b) {a+b} testfun([1,2,3],[4,5,6])" 3

; input promotion
; CHECK: 7 7 7
; "def FLOAT[3] testfun(FLOAT[3] a, FLOAT[3] b) {a+b} testfun(3,4)" 3

; input promotion
; CHECK: 7 7 7
; "def testfun(FLOAT a, FLOAT b) {a+b} testfun([3,4,5],[4,5,6])" 3

; TODO: prep fails
; CHECK: 5 5 5
;"def FLOAT[3] testfun(FLOAT a, FLOAT b) {a+b} testfun(1,4)" 3
;/**************************************************************************/

; TODO: allow variable binding
; CHECK: 7 WITH: a=[1,2,3];

; TODO: test external variable
; TODO: test custom function


; TODO: how to check double precision results?
; FUNC1
; CHECK
"deg(90)" 1

; FUNC2
; CHECK
"atan2d(90,90)" 1

; FUNC3
; CHECK
"clamp(8,9,10)" 1

; FUNC5
; CHECK
"fit(8,9,10,11,12)" 1

; FUNC6
; CHECK
"dist(8,9,10,11,12,13)" 1

; FUNC1V
; CHECK
"snoise([3,4,5])" 1

; FUNC2V
; CHECK
"angle([3,4,5],[7,8,9])" 1

; FUNC1VV
; CHECK
"cnoise([3,4,5])" 3

; FUNC2VV
; CHECK
"up([3,4,5],[6,7,8])" 3

; FUNCNV
; CHECK
"fbm([3,4,5])" 1

; FUNCNVV
; CHECK
"hsi([3,4,5],.3,.6,.2)" 3

; TODO: prep fails
; FUNCN
; CHECK
;"hash(8,9,10,11,12,13)" 1

; CHECK
"a = curve(8, 1, 2, 4); a + 10" 1

; CHECK
"ccurve(8, 1, [2,6,7], 4)" 3

; CHECK
"voronoi([6,7,8])" 3

; CHECK
"cvoronoi([6,7,8])" 3

; CHECK
"pvoronoi([6,7,8], 2, .6, 2)" 3

; FUNC1VV
; CHECK
"a = cnoise(4*[3,4,5]); a+20" 3

; CHECK
"a = sin(10); a+20" 1

; CHECK: 7
"def testfun(FLOAT a, FLOAT b) {a+b} testfun(3,4)" 1

; CHECK: 5 7 9
"def testfun(FLOAT[3] a, FLOAT[3] b) {a+b} testfun([1,2,3],[4,5,6])" 3

; CHECK: undefined
"extern FLOAT sin(FLOAT) sin(u)" 3

"printf("test %v %v", [.1,.2,.3], [.4,.5,.6])" 1

"pick(.5, 1,10)" 1

"exposure([1,2,3],[4,5,6])" 3

"deepWater([1,2,3],1,1,1,1,1,1,1,1,[3,4,5],2,4,5,6)" 3

; TODO: need filename
;"particalSampler([1,2,3],"filename",1,2,3,4,5)" 3
